#3.3
js 파일이 있기 때문에 js를 통해 html의 내용을 가져올 수 있음
document가 html이 app.js를 load하기 때문에 존재함 -> browser가 우리가 document에 접근할 수 있게 해줌
event: 어떤 행위를 하는 것 (click, h1 위로 마우스 올리기, 입력을 끝내기, enter 누르기 등...)
모든 event를 JavaScript가 listen 할 수 있음
title.addEventListener("event name", function);  --> addEventListner를 호출하고 listen하고 싶은 event 이름을 알려줌, event가 발생하면 호출할 funcition을 전달함

#3.4
listen하고 싶은 event를 찾는 방법: 
1. 구글에 '(element의 이름) mdn' 검색 -> 'Web APIs' 문장이 포함된 페이지 들어가기 (Web APIs: js 관점의 HTML Heading Element)
2. console.dir(title); 로 element를 console에 출력시킴 -> console에 엄청 많은 property가 출력됨 

#3.5
event를 listen하는 또 다른 방법: title.onEventName = function;
addEventListener은 .removeEventListener로 event listener을 제거할 수 있음
document처럼 window도 js에서 기본적으로 제공해줌

#3.6

#3.7
css의 class를 js에서 변수에 저장하여 사용하면, 변수명을 잘못 썼을 때 오류를 쉽게 알 수 있음

#3.8
className은 이전의 class들을 상관하지 않고 모든 걸 바꿈
classList의 function 중 conatins(class) -> 명시된 class가 HTML element의 class에 포함되어 있는지 말해줌
classList의 또 다른 function: h1.classList.remove(class) / h1.classList.add(class)
toggle function: class name이 존재하는지 확인함 / class name이 존재하면 -> class name 제거, class name이 존재하지 않으면 -> class name 추가

#4.0
querySelector()를 사용할 때는 대상이 id인지 명확히 해줘야 함 (querySelector()로는 className, tagName 모두 검색 가능하기 때문!)

#4.1
value.length  -> string의 길이 구하기

#4.2
submit은 엔터를 누르거나 버튼을 클릭할 때 발생함
새로고침은 form submit의 기본 동작

#4.3
link의 기본 동작은 클릭 시 다른 페이지로 이동하는 것
alert는 모든 동작들을 막게 됨
function functionName (event) {event.preventDefault();} --> 기본 동작 막기

#4.4
일반적으로, string만 포함된 변수는 대문자로만 표기함
"String " + value; === `String ${value}` (반드시 `` 백틱 기호를 사용해야 함)

#4.5
local storage는 우리가 브라우저에 뭔가를 저장하고 나중에 가져다가 쓸 수 있게 해줌
localStorage.setItem("key", value) --> 저장
localStorage.getItem("key") --> 값 불러오기 (결과는 value)
localStrorage.removeItem("key") --> 값 삭제하기

#4.6
string이 오타가 나면 js는 오류를 내지 않음 / 변수명이 오타가 나면 js가 오류를 냄 -> string을 반복해서 사용할 경우, 대문자 변수로 만들어주는 것이 좋음!

#4.7 복습